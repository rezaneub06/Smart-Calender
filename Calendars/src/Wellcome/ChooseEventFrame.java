/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Wellcome;

import java.awt.Color;
import java.awt.Container;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Kibria
 */
public class ChooseEventFrame extends javax.swing.JFrame {

    /**
     * Creates new form ChooseEventFrame
     */
    private Container c;
    int dd, mm, yy;
    String allDate = "",dateday, day= "", month= "", year= "";
    public ChooseEventFrame() {
        initComponents();
        
        
        c = this.getContentPane();
        this.setVisible(true);
        this.setLocation(280, 10);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.setTitle("Smart_Calender");
        c.setBackground(Color.PINK);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ChooseEventTable = new javax.swing.JTable();
        ChooseEventLabel = new javax.swing.JLabel();
        ChooseEventFieldname = new javax.swing.JTextField();
        ChooseEventFieldDate = new javax.swing.JTextField();
        ChooseEventEnterButton = new javax.swing.JButton();
        ChooseEventBackButton = new javax.swing.JButton();
        ChooseExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ChooseEventTable.setBackground(new java.awt.Color(204, 204, 204));
        ChooseEventTable.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(51, 51, 0), 2, true));
        ChooseEventTable.setFont(new java.awt.Font("Times New Roman", 3, 14)); // NOI18N
        ChooseEventTable.setForeground(new java.awt.Color(51, 0, 51));
        ChooseEventTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "New Year’s Day", "1/1/1000"},
                {"2", "International Parity at Work Day", "11/1/2017"},
                {"3", "International Religion Day", "18/1/1950"},
                {"4", "International Freedom Day", "23/1/1954"},
                {"5", "International Customs Day", "26/1/1953"},
                {"6", "International Holocaust Remembrance Day", "27/1/1945"},
                {"7", "International Reducing CO2 Emissions Day", "28/1/1992"},
                {"8", "International of Nonviolence and Peace Day", "30/1/1982"},
                {"9", "Street Children’s Day", "31/1/2009"},
                {"10", "World Wetlands Day", "2/2/1971"},
                {"11", "World Cancer Day", "4/2/2008"},
                {"12", "International Day of Zero Tolerance to Female Genital Mutilation", "6/2/2015"},
                {"13", "World Day of the Sick", "11/2/1992"},
                {"14", "World Radio Day", "13/2/2012"},
                {"15", "World Valentine Day", "14/2/1020"},
                {"16", "World Cholangiocarcinoma Day", "15/2/1965"},
                {"17", "World Day of Social Justice", "20/2/2009"},
                {"18", "International Mother Language Day", "21/2/1952"},
                {"19", "Defend the Donut Day", "24/2/1996"},
                {"20", "World NGO Day", "27/2/1980"},
                {"21", "International Women’s Day", "8/3/1900"},
                {"22", "International Day of Happiness", "20/2/2012"},
                {"23", "International Day of Forests", "21/3/2007"},
                {"24", "World Water Day", "22/3/1992"},
                {"25", "Bangladesh Independence Day", "26/3/1971"},
                {"26", "World April Fools’ Day", "1/4/1668"},
                {"27", "International Children’s Book Day", "2/4/1967"},
                {"28", "World Health Day", "7/4/1948"},
                {"29", "International Mother Earth Day", "22/4/1992"},
                {"30", "English Language Day", "23/4/2010"},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "        NO ", "                 Event ", "            Started_ Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ChooseEventTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChooseEventTable.setRowHeight(30);
        ChooseEventTable.getTableHeader().setReorderingAllowed(false);
        ChooseEventTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ChooseEventTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ChooseEventTable);

        ChooseEventLabel.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        ChooseEventLabel.setForeground(new java.awt.Color(51, 0, 51));
        ChooseEventLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ChooseEventLabel.setText(" Event List");
        ChooseEventLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 0), 2, true));

        ChooseEventFieldname.setEditable(false);
        ChooseEventFieldname.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ChooseEventFieldname.setForeground(new java.awt.Color(51, 0, 51));
        ChooseEventFieldname.setToolTipText("Event Name");
        ChooseEventFieldname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 0), 2, true));

        ChooseEventFieldDate.setEditable(false);
        ChooseEventFieldDate.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ChooseEventFieldDate.setForeground(new java.awt.Color(51, 0, 51));
        ChooseEventFieldDate.setToolTipText("Date");
        ChooseEventFieldDate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 0), 2, true));

        ChooseEventEnterButton.setBackground(new java.awt.Color(51, 0, 51));
        ChooseEventEnterButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ChooseEventEnterButton.setForeground(new java.awt.Color(0, 204, 204));
        ChooseEventEnterButton.setText("Enter");
        ChooseEventEnterButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ChooseEventEnterButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChooseEventEnterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseEventEnterButtonActionPerformed(evt);
            }
        });

        ChooseEventBackButton.setBackground(new java.awt.Color(51, 0, 51));
        ChooseEventBackButton.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ChooseEventBackButton.setForeground(new java.awt.Color(0, 204, 204));
        ChooseEventBackButton.setText("Home");
        ChooseEventBackButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ChooseEventBackButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChooseEventBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseEventBackButtonActionPerformed(evt);
            }
        });

        ChooseExit.setBackground(new java.awt.Color(51, 0, 51));
        ChooseExit.setFont(new java.awt.Font("Times New Roman", 3, 18)); // NOI18N
        ChooseExit.setForeground(new java.awt.Color(0, 204, 204));
        ChooseExit.setText("Exit");
        ChooseExit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ChooseExit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ChooseExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(ChooseEventFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ChooseEventFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ChooseEventEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 8, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(232, 232, 232)
                                .addComponent(ChooseEventBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(ChooseExit, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(188, 188, 188)
                                .addComponent(ChooseEventLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseEventFieldname, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChooseEventFieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChooseEventEnterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ChooseEventLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ChooseEventBackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ChooseExit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ChooseExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ChooseExitActionPerformed

    private void ChooseEventEnterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseEventEnterButtonActionPerformed
        
        calculationDay();
        OutputData f=new OutputData(allDate,dateday);
        this.dispose();
    }//GEN-LAST:event_ChooseEventEnterButtonActionPerformed

    private void ChooseEventBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseEventBackButtonActionPerformed
        this.dispose();
        ChooseEvent f=new ChooseEvent();
    }//GEN-LAST:event_ChooseEventBackButtonActionPerformed

    private void ChooseEventTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ChooseEventTableMouseClicked
       DefaultTableModel model = (DefaultTableModel)ChooseEventTable.getModel();
       int index=ChooseEventTable.getSelectedRow();
       
       ChooseEventFieldname.setText(model.getValueAt(index,1).toString());
       ChooseEventFieldDate.setText(model.getValueAt(index,2).toString());
       String st=ChooseEventFieldDate.getText();
       String[] ss=st.split("/");
       allDate=""+ss[0]+"/"+ss[1]+"/"+ss[2];
       dd=Integer.parseInt(ss[0]);
       mm=Integer.parseInt(ss[1]);
       yy=Integer.parseInt(ss[2]);
       
    }//GEN-LAST:event_ChooseEventTableMouseClicked

     public void calculationDay() {
        int n, year = yy, month = mm, date = dd, year_valu = 0, month_valu = 0, remnant = 0, div, all_sum, day;
        
        if ((100 <= year && year < 200) || (800 <= year && year < 900) || (1500 <= year && year < 1600) || (2100 <= year && year < 2200) || (2400 <= year && year < 2900) || (3500 <= year && year < 3600) || (4200 <= year && year < 4300) || (4900 <= year && year < 5000)) {
            if (100 <= year && year < 200) {
                year_valu = 5;
                remnant = year - 100;
            } else if (800 <= year && year < 900) {
                year_valu = 5;
                remnant = year - 800;
            } else if (1500 <= year && year < 1600) {
                year_valu = 5;
                remnant = year - 1500;
            } else if (2100 <= year && year < 2200) {
                year_valu = 5;
                remnant = year - 2100;
            } else if (2400 <= year && year < 2900) {
                year_valu = 5;
                remnant = year - 2400;
            } else if (3500 <= year && year < 3600) {
                year_valu = 5;
                remnant = year - 3500;
            } else if (4200 <= year && year < 4300) {
                remnant = year - 4200;
            } else if (4900 <= year && year < 5000) {
                year_valu = 5;
                remnant = year - 4900;
            }
        } else if ((200 <= year && year < 300) || (900 <= year && year < 1000) || (1600 <= year && year < 1700) || (2200 <= year && year < 2300) || (2900 <= year && year < 3000) || (3600 <= year && year < 3700) || (4300 <= year && year < 4400) || (year == 5000)) {
            if (200 <= year && year < 300) {
                year_valu = 4;
                remnant = year - 200;
            } else if (900 <= year && year < 1000) {
                year_valu = 4;
                remnant = year - 900;
            } else if (1600 <= year && year < 1700) {
                year_valu = 4;
                remnant = year - 1600;
            } else if (2200 <= year && year < 2300) {
                year_valu = 4;
                remnant = year - 2200;
            } else if (2900 <= year && year < 3000) {
                year_valu = 4;
                remnant = year - 2900;
            } else if (3600 <= year && year < 3700) {
                year_valu = 4;
                remnant = year - 3600;
            } else if (4300 <= year && year < 4400) {
                year_valu = 4;
                remnant = year - 4300;
            } else if (year == 5000) {
                year_valu = 4;
                remnant = year - 5000;
            }
        } else if ((300 <= year && year < 400) || (1000 <= year && year < 1100) || (1700 <= year && year < 1800) || (2300 <= year && year < 2400) || (3000 <= year && year < 3100) || (3700 <= year && year < 3800) || (4400 <= year && year < 4500)) {
            if (300 <= year && year < 400) {
                year_valu = 3;
                remnant = year - 300;
            } else if (1000 <= year && year < 1100) {
                year_valu = 3;
                remnant = year - 1000;
            } else if (1700 <= year && year < 1800) {
                year_valu = 3;
                remnant = year - 1700;
            } else if (2300 <= year && year < 2400) {
                year_valu = 3;
                remnant = year - 2300;
            } else if (3000 <= year && year < 3100) {
                year_valu = 3;
                remnant = year - 3000;
            } else if (3700 <= year && year < 3800) {
                year_valu = 3;
                remnant = year - 3700;
            } else if (4400 <= year && year < 4500) {
                year_valu = 3;
                remnant = year - 4400;
            }
        } else if ((400 <= year && year < 500) || (1100 <= year && year < 1200) || (1800 <= year && year < 1900) || (2400 <= year && year < 2500) || (3100 <= year && year < 3200) || (3800 <= year && year < 3900) || (4500 <= year && year < 4600)) {
            if (400 <= year && year < 500) {
                year_valu = 2;
                remnant = year - 400;
            } else if (1100 <= year && year < 1200) {
                year_valu = 2;
                remnant = year - 1100;
            } else if (1800 <= year && year < 1900) {
                year_valu = 2;
                remnant = year - 1800;
            } else if (2400 <= year && year < 2500) {
                year_valu = 2;
                remnant = year - 2400;
            } else if (3100 <= year && year < 3200) {
                year_valu = 2;
                remnant = year - 3100;
            } else if (3800 <= year && year < 3900) {
                year_valu = 2;
                remnant = year - 3800;
            } else if (4500 <= year && year < 4600) {
                year_valu = 2;
                remnant = year - 4500;
            }
        } else if ((500 <= year && year < 600) || (1200 <= year && year < 1300) || (2500 <= year && year < 2600) || (3200 <= year && year < 3300) || (3900 <= year && year < 4000) || (4600 <= year && year < 4700)) {
            if (500 <= year && year < 600) {
                year_valu = 1;
                remnant = year - 500;
            } else if (1200 <= year && year < 1300) {
                year_valu = 1;
                remnant = year - 1200;
            } else if (2500 <= year && year < 2600) {
                year_valu = 1;
                remnant = year - 2500;
            } else if (3200 <= year && year < 3300) {
                year_valu = 1;
                remnant = year - 3200;
            } else if (3900 <= year && year < 4000) {
                year_valu = 1;
                remnant = year - 3900;
            } else if (4600 <= year && year < 4700) {
                year_valu = 1;
                remnant = year - 4600;
            }
        } else if ((600 <= year && year < 700) || (1300 <= year && year < 1400) || (1900 <= year && year < 2000) || (2600 <= year && year < 2700) || (3300 <= year && year < 3400) || (4000 <= year && year < 4100) || (4700 <= year && year < 4800)) {
            if (600 <= year && year < 700) {
                year_valu = 0;
                remnant = year - 600;
            } else if (1300 <= year && year < 1400) {
                year_valu = 0;
                remnant = year - 1300;
            } else if (1900 <= year && year < 2000) {
                year_valu = 0;
                remnant = year - 1900;
            } else if (2600 <= year && year < 2700) {
                year_valu = 0;
                remnant = year - 2600;
            } else if (3300 <= year && year < 3400) {
                year_valu = 0;
                remnant = year - 3300;
            } else if (4000 <= year && year < 4100) {
                year_valu = 0;
                remnant = year - 4000;
            } else if (4700 <= year && year < 4800) {
                year_valu = 0;
                remnant = year - 4700;
            }
        } else if ((700 <= year && year < 800) || (1400 <= year && year < 1500) || (2000 <= year && year < 2100) || (2700 <= year && year < 2800) || (3400 <= year && year < 3500) || (4100 <= year && year < 4200) || (4800 <= year && year < 4900)) {
            if (700 <= year && year < 800) {
                year_valu = 6;
                remnant = year - 700;
            } else if (1400 <= year && year < 1500) {
                year_valu = 6;
                remnant = year - 1400;
            } else if (2000 <= year && year < 2100) {
                year_valu = 6;
                remnant = year - 2000;
            } else if (2700 <= year && year < 2800) {
                year_valu = 6;
                remnant = year - 2700;
            } else if (3400 <= year && year < 3500) {
                year_valu = 6;
                remnant = year - 3400;
            } else if (4100 <= year && year < 4200) {
                year_valu = 6;
                remnant = year - 4100;
            } else if (4800 <= year && year < 4900) {
                year_valu = 6;
                remnant = year - 4800;
            }
        }

        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            if (month == 1) {
                month_valu = 0;
            } else if (month == 2) {
                month_valu = 3;
            }
        } else {
            if (month == 1) {
                month_valu = 1;
            } else if (month == 2) {
                month_valu = 4;
            }
        }
        if ((month == 3) || (month == 11)) {
            month_valu = 4;
        } else if ((month == 4) || (month == 7)) {
            month_valu = 0;
        } else if (month == 5) {
            month_valu = 2;
        } else if (month == 6) {
            month_valu = 5;
        } else if (month == 8) {
            month_valu = 3;
        } else if ((month == 9) || (month == 12)) {
            month_valu = 6;
        } else if (month == 10) {
            month_valu = 1;
        }

        div = remnant / 4;

        all_sum = year_valu + remnant + div + month_valu + date;

        day = all_sum % 7;

        if (day == 0) {
            dateday="Saturday";
        } else if (day == 1) {
            dateday="Sunday";
        } else if (day == 2) {
            dateday="Monday";
        } else if (day == 3) {
            dateday="Tuesday";
        } else if (day == 4) {
            dateday="Wednesday";
        } else if (day == 5) {
            dateday="Thursday";
        } else if (day == 6) {
            dateday="Friday";
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseEventFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseEventFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseEventFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseEventFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              ChooseEventFrame f=new ChooseEventFrame();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ChooseEventBackButton;
    private javax.swing.JButton ChooseEventEnterButton;
    private javax.swing.JTextField ChooseEventFieldDate;
    private javax.swing.JTextField ChooseEventFieldname;
    private javax.swing.JLabel ChooseEventLabel;
    private javax.swing.JTable ChooseEventTable;
    private javax.swing.JButton ChooseExit;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
